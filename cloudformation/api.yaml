swagger: 2.0
info:
  title: "API Gateway"
  description: "API Gateway for Chat Service"
  version: "2017-04-17"
host: "api.amazonaws.com"
basePath: "/"
schemes:
- https
paths:
  /chats/{chatId}:
    get:
      description: "Retrieves history of chatroom"
      produces:
      - "application/json"
      responses:
        200:
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Message"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        responses:
          default:
            statusCode: "500"
        uri: "arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWSRegion}:${AccountId}:function:${LambdaName}/invocations"            
    post:
      description: "Sends a chat to the chatroom {chatId}"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        schema:
          $ref: "#/definitions/Message"
      responses:
        200:
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        responses:
          default:
            statusCode: "500"
        uri: "arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWSRegion}:${AccountId}:function:${LambdaName}/invocations"
  /chats:
    post:
      description: "Creates a new chatroom"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        schema:
          type: "array"
          items:
            type: "string"
      responses:
        201:
          description: "Successfully created a new chatroom"
          schema:
            type: "string"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        responses:
          default:
            statusCode: "500"
        uri: "arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWSRegion}:${AccountId}:function:${LambdaName}/invocations"
  /users:
    post:
      description: "Create a new user account"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        schema:
          $ref: "#/definitions/UserInfo"
      responses:
        201:
          description: "Successfully created a new user"
          schema:
            $ref: "#/defintions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "500"
        uri: "arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWSRegion}:${AccountId}:function:${LambdaName}/invocations"
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    get:
      description: "Get list of all users (will probably need to be changed for security/privacy)"
      produces:
      - "application/json"
      responses:
        200:
          schema:
            type: "array"
            items:
              $ref: "#/definitions/UserInfo"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
        500:
          schema:
            $ref: "#/definitions/Error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        type: aws_proxy
        httpMethod: POST
        responses:
          default:
            statusCode: "500"
        uri: "arn:aws:apigateway:${AWSRegion}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWSRegion}:${AccountId}:function:${LambdaName}/invocations"
        passthroughBehavior: when_no_match
definitions:
  Empty:
    type: "object"
  Error:
    type: "object"
  Message:
    description: "A single message object"
    type: "object"
    required:
    - "userId"
    - "message"
    properties:
      userId:
        type: "string"
      message:
        type: "string"
      timestamp:
        description: "ISO 8601 E8601DTw.d date-time format (ie: 2008-09-15T15:53:00)"
        type: "string"
  UserInfo:
    description: "Publicly available information about a user"
    type: "object"
    required:
    - "name"
    properties:
      name:
        type: "string"
